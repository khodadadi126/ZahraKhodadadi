   
% Initilization and loading all the needed Baseline Variables
clc;clear all;warning off all;fclose all;
close all;
%RandStream.setDefaultStream(RandStream('mt19937ar','seed',sum(100*clock)));
load Spa_Temp_Baseline
%%%%%%%%%%%%%%%
   Nom=imread('Tile_Nom.bmp');
   %Nom=New;
  
%    Nom=rgb2gray(Nom);
   % Nomd=rgb2gray(Nomd);
% Nomd=double(Nom);
  Nom=imresize(Nom,[512,512]);
        pfilter='pkva';
        dfilter='pkva';
        nlevels=[1 2];


        y = pdfbdec(double(Nom),pfilter, dfilter, nlevels);

        %figure
        ContourletCoeff=showpdfb(y);
        Nom=ContourletCoeff.New;
          Nom=imresize(Nom,[250,250]);
           Nom=imresize(Nom,[250,250]);
        % I=double(I);
       % I=imresize(I,[250 250]);
      % I=I/max(max(I))*250;
%Nom=imread('ff.bmp');
%Nom=load('CC');
%Nom=Nom.cc;
%Nom=imread(Nom);


  
%    Nomd=rgb2gray(Nomd);
%figure
%imshow(Nom)
%figure
%imshow(Nomd)
%Delta= [-10 -5 -3 -2 -1 1 2 3 5 10 -10 -5 -3 -2 -1 1 2 3 5 10 -10 -5 -3 -2 -1 1 2 3 5 10];
%Delta= [-10 -5 -3 -2 -1 1 2 3 5 10 -10 -5 -3 -2 -1 1 2 3 5 10 -10 -5 -3 -2 -1 1 2 3 5 10];


%----------------------------------
SS_Number=20;
%----------------------------------------

fault=[0,0,10,10,125,125];
%----------------------number of simulation
nos=50; 
%UCL=987500;
UCL=977500;
%UCL=103150;
%nos=2; 
%UCL=20;
%UCL=215;
%--------------------------------------------
MinUCL=UCL;
yy=1;
while UCL>=MinUCL
  
k=4.288;
N=pixs(1)*pixs(2);
mus2=mus.^2;
fault_pat=zeros(pixs(1),pixs(2));
X_sum=zeros([size(mus),m]);
lratconst=1/2/vars;
mfiller=zeros([size(mus),1]);
mflag=0;

%UCL=mean_rats+k*std_rats;

%UCL0=mean_rats+k*std_rats;
RL=zeros(1,nos);
%ARL=zeros(1,length(Delta));
%MRL=zeros(1,length(Delta));
%coverage=zeros(length(Delta),nos);
fault_square=zeros(pixs(1),pixs(2));
fault_square((fault(5)-fault(3)/2):(fault(5)+fault(3)/2),...
    (fault(6)-fault(4)/2):(fault(6)+fault(4)/2))...
    =ones(fault(3)+1,fault(4)+1);
% clear mean_rats std_rats
Fadel=1;
%while Fadel<=length(Delta) %CHECK%
%while Fadel<=1 %CHECK%
  
    jj=1;
%=============% start of simulation=========================================================================
   
    while jj <= nos
   %while jj < 1
        counter=0;
        flag=1;
        FaultPattern=zeros(pixs(1),pixs(2));
        %********************************************************************************************************
        %**********************%if the control chart be under control********************************************
           while flag==1                
            counter=counter+1;
            ratio=-inf;
          %  if counter>SSnow && Delta(Fadel)~=0
                FaultPattern((fault(5)-fault(3)/2):(fault(5)+fault(3)/2),(fault(6)-fault(4)/2):(fault(6)+fault(4)/2))=normrnd(fault(1),fault(2),fault(3)+1,fault(4)+1);
            %end
            if counter > m
               mflag=counter-m;
                X_sum(:,:,:,1:m-1)=X_sum(:,:,:,2:m);
              X_sum(:,:,:,m)=mfiller;
            else
               mflag=0;
            end
           % I1=imnoise(Nom,'Poisson');
           
               I=imnoise(Nom,'Poisson');
           % I=Nomd-double(I)+FaultPattern;
              I=Nomd-double(I);
           % I1=imresize(I1,[128,128]);
           % I=Nomd;
              
               %------------------------------
       
    %   I=I-double(I1);
      % I=I/max(max(I));
       
        %---------------------------------
              
              
                %______________________________________________________________________________________
                                        for i = 1:grids(1) %Run through x locations for center of serveillance box
                                            for j = 1:grids(2) %Run through y locations for center of serveillance box
                                                for stepper=1:max_steps(i,j)
                                                    if stepper==1
                                                        I_2_test=I(I_2_test1_reg{i,j,stepper}(1):I_2_test1_reg{i,j,stepper}(2),I_2_test1_reg{i,j,stepper}(3):I_2_test1_reg{i,j,stepper}(4)); %Take Pixels out of Picture in box
                                                        I_2_test_reshape=reshape(I_2_test,1,X_count(i,j,stepper)); %Reshape Pixels into a vector
                                                        X_sum(i,j,stepper,counter-mflag)=sum(I_2_test_reshape); %Collect sums of diffs
                                                    else
                                                        I_2_test1=I(I_2_test1_reg{i,j,stepper}(1):I_2_test1_reg{i,j,stepper}(2),I_2_test1_reg{i,j,stepper}(3):I_2_test1_reg{i,j,stepper}(4)); %Pixels on Top of box
                                                        I_2_test2=I(I_2_test2_reg{i,j,stepper}(1):I_2_test2_reg{i,j,stepper}(2),I_2_test2_reg{i,j,stepper}(3):I_2_test2_reg{i,j,stepper}(4)); %Pixels on Bottom of box
                                                        I_2_test3=I(I_2_test3_reg{i,j,stepper}(1):I_2_test3_reg{i,j,stepper}(2),I_2_test3_reg{i,j,stepper}(3):I_2_test3_reg{i,j,stepper}(4));  %Pixels on Left of box
                                                        I_2_test4=I(I_2_test4_reg{i,j,stepper}(1):I_2_test4_reg{i,j,stepper}(2),I_2_test4_reg{i,j,stepper}(3):I_2_test4_reg{i,j,stepper}(4));  %Pixels on Right of box
                                                        I_2_test=[I_2_test1 I_2_test2 I_2_test3' I_2_test4']; %Take Pixels on edge of box
                                                        I_2_test_reshape=reshape(I_2_test,1,X_count(i,j,stepper)); %Reshape Pixels into a vector
                                                        X_sum(i,j,stepper,counter-mflag)=sum(I_2_test_reshape)+X_sum(i,j,stepper-1,counter-mflag); %Collect sums of diffs
                                                    end
                                                    mu_est=X_sum(i,j,stepper,counter-mflag)/X_count2(i,j,stepper); %Sample mean from box
                                                    rat=lratconst(i,j,stepper)*X_count2(i,j,stepper)*(mu_est-mus(i,j,stepper))^2;
                                                    if rat>ratio %If the statistic is bigger than previous one
                                                        if rat==inf || rat ==-inf
                                                            %  ratio=ratio; %New statistic  
                                                        else
                                                        ratio=rat; %New statistic
                                                        end
                                                      %  fault_time_temp=counter-SSnow-1;
                                                      %  locate=[i,j,stepper];
                                                    end

                                                  % disp(['ratio=' num2str(ratio)])
                                                %   disp('---------------------------------------------------------')
                                                   
                                                    if rat>mean_init_rats(i,j,stepper)
                                                        for counter_retro=counter-1:-1:1+mflag
                                                            X_counttemp=(counter-counter_retro+1)*X_count2(i,j,stepper);
                                                            X_sum(i,j,stepper,counter_retro-mflag)=X_sum(i,j,stepper,counter_retro-mflag)+X_sum(i,j,stepper,counter-mflag);
                                                            mu_est=X_sum(i,j,stepper,counter_retro-mflag)/X_counttemp; %Sample mean from box
                                                           rat1=rat;
                                                           ratio1=ratio;
                                                            rat=lratconst(i,j,stepper)*X_counttemp*(mu_est-mus(i,j,stepper))^2;
                                                            if rat>ratio
                                                
                                                
                                                                ratio=rat;
                                          
                                                            elseif rat<0
                                                                break;
                                                            end
                                                        end
                                                    end
                                                  
                                     
                                                  
                                                  
                                                end
                                            end
                                        end
               %______________________________________________________________________________________
            
            
  %---------------------------------------------------------------------------
        %    out of control
      
        disp([  'the number of simulation=' num2str(jj)   '     point='  num2str(counter) '     Ratio=' num2str(ratio) '     UCL=' num2str(UCL)]);
            if ratio > UCL
                jj=jj+1;
                  break
            else
                RL(jj)=counter;
                
              
                
            end   
                
            %    if counter <= SSnow
                    
             %       break;
              %  else
              %      jj=jj+1;
               %     fault_time(Fadel,jj)=fault_time_temp;
               %      if Delta(Fadel)~=0
                 %       region_square=zeros(pixs(1),pixs(2));
               %         region_square(center(locate(1),locate(2),1)-steps{locate(1),locate(2)}(locate(3))/2:center(locate(1),locate(2),1)+steps{locate(1),locate(2)}(locate(3))/2, center(locate(1),locate(2),2)-steps{locate(1),locate(2)}(locate(3))/2:center(locate(1),locate(2),2)+steps{locate(1),locate(2)}(locate(3))/2)=ones(steps{locate(1),locate(2)}(locate(3))+1,steps{locate(1),locate(2)}(locate(3))+1);
              %          fault_square=zeros(pixs(1),pixs(2));
               %         fault_square((fault(5)-fault(3)/2):(fault(5)+fault(3)/2),(fault(6)-fault(4)/2):(fault(6)+fault(4)/2))=ones(fault(3)+1,fault(4)+1);
              %          Overlap=region_square.*fault_square;
%                         coverage(Fadel,jj)=sum(sum(Overlap))^2/X_count2(locate(1),locate(2),locate(3))/((fault(3)+1)*(fault(4)+1));
                %        coverage(Fadel, jj)= 2*sum(sum(Overlap))/ (X_count2(locate(1),locate(2),locate(3))+((fault(3)+1)*(fault(4)+1)));
                 %   end
               %     RL(jj)=counter-SSnow;
               %     clc;
                %    fprintf('The Current ARL = %6.4f, MRL = %6.4f, after %d simulations when delta = %6.4f and SimNo= %d',mean(RL(1:jj)),median(RL(1:jj)),jj,Delta(Fadel),Fadel);
                   
                  %  disp(['Ucl='   num2str(UCL0)]);
               %     flag=0;
             %   end
            end
            
            %-------------------------------------------------------------------------------------------------
    
        %*****************************************************************************************
        %*************************************************************************************************
%Fadel=Fadel+1;
disp('------------------------------------------------')
    end


%_________________________________________________________________________
ARL=mean(RL);
MRL=median(RL);
disp(['UCl=' num2str(UCL) '    ARL='  num2str(ARL)   '      MRL=' num2str(MRL)]);
disp('_______________________________________________________________________________________________')
disp('_______________________________________________________________________________________________')
disp('_______________________________________________________________________________________________')
%__________________________________________________________________________

Arl(yy)=ARL;
Mrl(yy)=MRL;
Ucl(yy)=UCL;
  %UCL=UCL-0.01;
  UCL=UCL-0.05;
yy=yy+1;
end

for kk=1:(yy)-1
disp([ 'UCL=' num2str(Ucl(kk)) '    ARL=' num2str(Arl(kk))  '   MRL='   num2str(Mrl(kk))]);
disp('===================================================================================')
end
Mrl(yy)=MRL;
Ucl(yy)=UCL;
save ('RRun', 'Arl', 'Mrl' ,'Ucl');











