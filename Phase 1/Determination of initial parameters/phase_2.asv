
% Initilization and loading all the needed Baseline Variables
clc;clear all;warning off all;fclose all;
%RandStream.setDefaultStream(RandStream('mt19937ar','seed',sum(100*clock)));
load Spa_Temp_Baseline
k=4.288;
N=pixs(1)*pixs(2);
pixs=[250;250]; %Number of Pixels to Reshape Image
%pixs=[128;128]; %Number of Pixels to Reshape Image
mus2=mus.^2;
fault_pat=zeros(pixs(1),pixs(2));
X_sum=zeros([size(mus),m]);
lratconst=1/2/vars;
mfiller=zeros([size(mus),1]);
mflag=0;
%%%%%%%%%%%%%%%
%Nom=imread('Nonwoven_Nom.bmp');
%Nom=imread('BM1.bmp');
   Nom=imread('Tile_Nom.bmp');
   %Nom=New;
  
%    Nom=rgb2gray(Nom);
   % Nomd=rgb2gray(Nomd);
 Nomd=double(Nom);

Delta= [-10 -5 -3 -2 -1 1 2 3 5 10      -10 -5 -3 -2 -1 1 2 3 5 10        -10 -5 -3 -2 -1 1 2 3 5 10];
%nos=1000; 
%-------------------number of simulation and UCL---------------------
fault=[0,0,10,10,125,125];
nos=10; 
UCL=987500;
UCL=977500;
%UCL=103150;
SS_Number=20;

%SS_Number=5;

%-------------------------------------------------

%SS_Number=8;
%fault=[0,0,10,10,125,125];

%UCL=mean_rats+k*std_rats;

RL=zeros(1,nos);
ARL=zeros(1,length(Delta));
MRL=zeros(1,length(Delta));
coverage=zeros(length(Delta),nos);
fault_square=zeros(pixs(1),pixs(2));

fault_square((fault(5)-fault(3)/2):(fault(5)+fault(3)/2),(fault(6)-fault(4)/2):(fault(6)+fault(4)/2))=ones(fault(3)+1,fault(4)+1);

% clear mean_rats std_rats
Fadel=1;
while Fadel<=length(Delta) %CHECK%
%while Fadel<=1 %CHECK%
    %Fadal is the number of fault like 10*10 
    %===========================================
                        if Fadel > 10 && Fadel<=20
                            fault(5)=188;
                            falut(6)=206;
                        elseif Fadel>=21
                                fault(5)=158;
                                fault(6)=78;
                        end
  %==============================================
  %--------------------------------------------------
    fault(1)=Delta(Fadel);
    if Delta(Fadel)==0
        SSnow=0;
    else
        SSnow=SS_Number;
    end
    %------------------------------------------------
    
    
    jj=0;
    
    
%============================================================================================================================
%=============================================Start of simulation for each delta==============================================================================
%============================================================================================================================
%=================================================================================================================================
    while jj < nos
 
        counter=0;
        flag=1;
        FaultPattern=zeros(pixs(1),pixs(2));
        while flag==1                
            counter=counter+1;
            ratio=-inf;
            %-------------------bad az tasvir 20 y naghs ijad mishavad-------------------
           
            if counter>SSnow && Delta(Fadel)~=0
               a= normrnd(fault(1),fault(2),fault(3)+1,fault(4)+1);
                
                FaultPattern((fault(5)-fault(3)/2):(fault(5)+fault(3)/2),(fault(6)-fault(4)/2):(fault(6)+fault(4)/2))=a;
               
            end
            %-------------------------------------------------------------
         %=====================================================================
            if counter > m
                mflag=counter-m;
                X_sum(:,:,:,1:m-1)=X_sum(:,:,:,2:m);
               % X_sum(:,:,:,m)=mfiller;
            else
                mflag=0;
            end
            %======================================================================
            I=imnoise(Nom,'Poisson');
            I=Nomd-double(I)+FaultPattern;
              %I=Nomd-double(I);
                    %------------------------------
        
        %---------------------------------
              
            
            
          %  I=Nomd-double(I);
            %___________________________________________________________________________________
            %calculation of R
            for i = 1:grids(1) %Run through x locations for center of serveillance box
                for j = 1:grids(2) %Run through y locations for center of serveillance box
                    for stepper=1:max_steps(i,j)
                        if stepper==1
                            I_2_test=I(I_2_test1_reg{i,j,stepper}(1):I_2_test1_reg{i,j,stepper}(2),I_2_test1_reg{i,j,stepper}(3):I_2_test1_reg{i,j,stepper}(4)); %Take Pixels out of Picture in box
                            I_2_test_reshape=reshape(I_2_test,1,X_count(i,j,stepper)); %Reshape Pixels into a vector
                            X_sum(i,j,stepper,counter-mflag)=sum(I_2_test_reshape); %Collect sums of diffs
                        else
                            I_2_test1=I(I_2_test1_reg{i,j,stepper}(1):I_2_test1_reg{i,j,stepper}(2),I_2_test1_reg{i,j,stepper}(3):I_2_test1_reg{i,j,stepper}(4)); %Pixels on Top of box
                            I_2_test2=I(I_2_test2_reg{i,j,stepper}(1):I_2_test2_reg{i,j,stepper}(2),I_2_test2_reg{i,j,stepper}(3):I_2_test2_reg{i,j,stepper}(4)); %Pixels on Bottom of box
                            I_2_test3=I(I_2_test3_reg{i,j,stepper}(1):I_2_test3_reg{i,j,stepper}(2),I_2_test3_reg{i,j,stepper}(3):I_2_test3_reg{i,j,stepper}(4));  %Pixels on Left of box
                            I_2_test4=I(I_2_test4_reg{i,j,stepper}(1):I_2_test4_reg{i,j,stepper}(2),I_2_test4_reg{i,j,stepper}(3):I_2_test4_reg{i,j,stepper}(4));  %Pixels on Right of box
                            I_2_test=[I_2_test1 I_2_test2 I_2_test3' I_2_test4']; %Take Pixels on edge of box
                            I_2_test_reshape=reshape(I_2_test,1,X_count(i,j,stepper)); %Reshape Pixels into a vector
                            X_sum(i,j,stepper,counter-mflag)=sum(I_2_test_reshape)+X_sum(i,j,stepper-1,counter-mflag); %Collect sums of diffs
                        end
                        mu_est=X_sum(i,j,stepper,counter-mflag)/X_count2(i,j,stepper); %Sample mean from box
                        rat=lratconst(i,j,stepper)*X_count2(i,j,stepper)*(mu_est-mus(i,j,stepper))^2;
                        if rat>ratio %If the statistic is bigger than previous one
                            ratio=rat; %New statistic
                            fault_time_temp=counter-SSnow-1;
                            locate=[i,j,stepper];
                        end
                      %-------------------------------------------
                                               if rat>mean_init_rats(i,j,stepper)
                                                         for counter_retro=counter-1:-1:1+mflag
                                                             X_counttemp=(counter-counter_retro+1)*X_count2(i,j,stepper);
                                                            X_sum(i,j,stepper,counter_retro-mflag)=X_sum(i,j,stepper,counter_retro-mflag)+X_sum(i,j,stepper,counter-mflag);
                                                             mu_est=X_sum(i,j,stepper,counter_retro-mflag)/X_counttemp; %Sample mean from box
                                                             rat=lratconst(i,j,stepper)*X_counttemp*(mu_est-mus(i,j,stepper))^2;
                                                             if rat>ratio
                                                                 ratio=rat;
                                                                 fault_time_temp=counter_retro-SSnow-1;
                                                                 locate=[i,j,stepper];
                                                            elseif rat<0
                                                                 break;
                                                            end
                                                         end
                                                     end
                        %----------------------------------------------------
                    end
                end
            end
            %calculation of R
            %_____________________________________________________________________________________________________
       
          %  ratio
         % counter
          if counter>=20 
              counter
             UCL
              ratio
          end
          
            if ratio > UCL
                if counter <= SSnow
                   % counter
                    
                    break;
                else
                    jj=jj+1;
                    fault_time(Fadel,jj)=fault_time_temp;
                    if Delta(Fadel)~=0
                        region_square=zeros(pixs(1),pixs(2));
                      
                        region_square(center(locate(1),locate(2),1)-steps{locate(1),locate(2)}(locate(3))/2:center(locate(1),locate(2),1)+steps{locate(1),locate(2)}(locate(3))/2, center(locate(1),locate(2),2)-steps{locate(1),locate(2)}(locate(3))/2:center(locate(1),locate(2),2)+steps{locate(1),locate(2)}(locate(3))/2)=ones(steps{locate(1),locate(2)}(locate(3))+1,steps{locate(1),locate(2)}(locate(3))+1);
                  
                        fault_square=zeros(pixs(1),pixs(2));
                     
                            b=ones(fault(3)+1,fault(4)+1);
                        fault_square((fault(5)-fault(3)/2):(fault(5)+fault(3)/2),(fault(6)-fault(4)/2):(fault(6)+fault(4)/2))=b;
                       
                        Overlap=region_square.*fault_square;
%                         coverage(Fadel,jj)=sum(sum(Overlap))^2/X_count2(locate(1),locate(2),locate(3))/((fault(3)+1)*(fault(4)+1));
                       coverage(Fadel, jj)= 2*sum(sum(Overlap))/ (X_count2(locate(1),locate(2),locate(3))+((fault(3)+1)*(fault(4)+1)));
                    end
                    RL(jj)=counter-SSnow;
                    RL2(jj)=counter;
                    clc;
                   % fprintf('The Current ARL = %6.4f, MRL = %6.4f, after %d simulations when delta = %6.4f and SimNo= %d',mean(RL(1:jj)),median(RL(1:jj)),jj,Delta(Fadel),Fadel);
                  
                    
                   flag=0;
                end
            end
            %____________________________________________________________________________________________
        end
   % disp( ['Delta(' num2str(Delta(Fadel)) ')' '      number of simulation =' num2str(jj) '    RL=[' num2str(RL2(jj)) ']       the number of points out of UCl=[ ' num2str(RL(jj)) ']' ]);
          if ratio > UCL && counter >= SSnow
           disp( ['Delta(' num2str(Delta(Fadel)) ')' '      number of simulation =' num2str(jj) '    RL=[' num2str(RL2(jj)) ']       the number of points out of UCl=[ ' num2str(RL(jj)) ']' ]);
      
         end         
    end
        
%============================================================================================================================
%=============================================End of simulation for each delta==============================================================================
%============================================================================================================================
%=================================================================================================================================

   % if Delta(Fadel)==0
    %    if median(RL)<146
    %        k=k+0.005*(150-median(RL));
    %%        UCL=mean_rats+k*std_rats;
     %       Fadel=0;
    %    elseif median(RL)>154
    %        k=k-0.005*(median(RL)-150);
    %        UCL=mean_rats+k*std_rats;
    %        Fadel=0;
    %    end
    %end 
    %****************************************************
    disp(['End of delta(' num2str(Delta(Fadel)) ')']);

      
    if Fadel>0
    ARL(Fadel)=mean(RL);MRL(Fadel)=median(RL);
    end
    disp(['Delta(' num2str(Delta(Fadel)) ')'   'UCl=' num2str(UCL) '    ARL='  num2str(ARL)   '      MRL=' num2str(MRL)]);
     disp('==============================================================================')
       disp('==============================================================================')
       disp('==============================================================================')
Fadel=Fadel+1;
end
%_________________________________________________________________________
% Spatiotemporal Performance metrics for the Simulations
Coverage_Median=median(coverage, 2);
Coverage_Mean= mean(coverage, 2);
Coverage_Std=std(coverage,0,2);
ErrorinTime=fault_time;
ErrorinTime_median= median(ErrorinTime,2);
ErrorinTime_mean= mean(ErrorinTime,2);
ErrorinTime_std=std(ErrorinTime,0,2);
%for i = 1:length(Delta)
for i = 1:1
C1(i)=numel(find(ErrorinTime(i,:)==0));
C2(i)=numel(find(abs(ErrorinTime(i,:))<=2))-C1(i);
C3(i)=numel(find(ErrorinTime(i,:)<=-3));
C4(i)=numel(find(ErrorinTime(i,:)>=3));
C1(i)=(C1(i)/nos)*100;
C2(i)=(C2(i)/nos)*100;
C3(i)=(C3(i)/nos)*100;
C4(i)=(C4(i)/nos)*100;
end
%__________________________________________________________________________
save ('ARLMeanShift10SqST', 'ARL', 'MRL','Delta','fault_time','SS_Number','k',...
      'Coverage_Median', 'Coverage_Mean', 'Coverage_Std', 'ErrorinTime',...
      'ErrorinTime_median','ErrorinTime_mean', 'ErrorinTime_std', ....
      'C1', 'C2', 'C3', 'C4', 'coverage');
